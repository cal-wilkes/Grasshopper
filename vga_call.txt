library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity vga_call is
	port( clk: in std_logic;
			reset: in std_logic;
			vga_control_10: in std_logic_vector(11 downto 0);   -- which module does this come from?
			vga_control_1: in std_logic_vector(11 downto 0);    -- which module does this come from?
			vga_control_0: in std_logic_vector(11 downto 0)     -- syntax error, which module does this come from?
			hsync: out STD_LOGIC;                              -- what produces this signal in this module
            vsync: out STD_LOGIC;                                           -- syntax error, what produces this signal in this module
			);
end vga_call;	

architecture Behavioral of vga_call is
	
	
	component tens is
		port(clk: in std_logic;
			reset: in std_logic;
			distance_10: in integer                               -- syntax error
			vga_control: out std_logic_vector(11 downto 0);      -- syntax error
			);
	end component;
	
	component ones is
		port(clk: in std_logic;
			reset: in std_logic;
			distance_1: in integer                                 -- syntax error
			vga_control: out std_logic_vector(11 downto 0);        -- syntax error
			);
	end component;
	
	component tenths is
		port(clk: in std_logic;
			reset: in std_logic;
			distance_0: in integer                                 -- syntax error
			vga_control: out std_logic_vector(11 downto 0);        -- syntax error
			);
	end component;
	
	component sync_signals_generator is
    Port ( pixel_clk : in  STD_LOGIC;
           reset : in  STD_LOGIC;
           hor_sync: out STD_LOGIC;
           ver_sync: out STD_LOGIC;
           blank: out STD_LOGIC;
           scan_line_x: out STD_LOGIC_VECTOR(10 downto 0);
           scan_line_y: out STD_LOGIC_VECTOR(10 downto 0);
           clk: in std_logic
		  );
end component;
	
	
	type int_array is array (0 to 2) of integer;
	signal distance : int_array;
	signal vga_blank : std_logic;
	signal scan_line_x, scan_line_y: STD_LOGIC_VECTOR(10 downto 0);
	signal i_pixel_clk: std_logic;                                            -- please look at this signal, it doesnt make sense how 											its used
	signal disp_10: std_logic_vector(11 downto 0);                         -- what does this signal do?
	signal disp_1: std_logic_vector(11 downto 0);                          -- what does this signal do?
	signal disp_0: std_logic_vector(11 downto 0); 			       -- what does this signal do?
	
	begin               							  -- please properly format this code
	
	
		VGA_SYNC: sync_signals_generator                            										
			Port map( 	pixel_clk   => i_pixel_clk,          -- you are feeding this port garbage this signal has not 									                properly been defined
						reset       => reset,         
						hor_sync    => hsync,         
						ver_sync    => vsync,
						blank       => vga_blank,
						scan_line_x => scan_line_x,
						scan_line_y => scan_line_y,
						clk => clk
						);
			  
			  
		aothos: tens
			port map( 
						clk => clk,
						reset => reset,
						distance_10 => distance(2),
						vga_control => vga_control_10
						);
						
		porthos: ones
			port map( 
						clk => clk,
						reset => reset,
						distance_1 => distance(1),
						vga_control => vga_control_1
						);

		aramis: tenths
			port map( 
						clk => clk,
						reset => reset,
						distance_0 => distance(0),
						vga_control => vga_control_0
						);				
						
						
		vga_control_0 <= "000000000000" when (vga_blank = '1') else disp_0;                   -- why are you trying to assign a        														value to an input signal 
		vga_control_1 <= "000000000000" when (vga_blank = '1') else disp_1;
		vga_control_10 <= "000000000000" when (vga_blank = '1') else disp_10;
		
		process(vga_control_0, vga_control_1, vga_control_10)                                  -- what does this process do?
		begin
		
			disp_0 <= vga_control_0;
			disp_1 <= vga_control_1;
			disp_10 <= vga_control_10;
		
		end process;

end Behavioral;					
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
